// Prisma schema for Vercel Postgres
// To apply the schema, run: npm run prisma:push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // parsed fields
  count        Int
  name         String
  set          String
  number       String
  raw          String
  // Scryfall full card object (nullable). Do not overwrite if already present.
  scryfallJson Json?

  // Relations
  poolCards    PoolCard[]

  @@unique([name])
  @@index([set])
}

model Pool {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Optional title or memo
  title     String?
  // Original pasted text (optional)
  raw       String?

  // Relations
  poolCards PoolCard[]
  drafts    Draft[]
}

model PoolCard {
  // Composite PK to avoid duplicates of the same card in a pool
  poolId    String
  cardId    String
  count     Int       // how many copies of this card in the pool
  order     Int?
  tags      String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  pool      Pool      @relation(fields: [poolId], references: [id], onDelete: Cascade)
  card      Card      @relation(fields: [cardId], references: [id])

  @@id([poolId, cardId])
  @@index([cardId])
}

model Draft {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  poolId String
  pool   Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)

  // NOTE: spec says "seet" number
  seet  Int
  packs Json
  picks Json

  @@index([poolId])
}
