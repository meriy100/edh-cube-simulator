// Prisma schema for Vercel Postgres
// To apply the schema, run: npm run prisma:push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Card {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // parsed fields
  count        Int
  name         String
  set          String
  number       String
  raw          String
  // Scryfall full card object (nullable). Do not overwrite if already present.
  scryfallJson Json?
  // CubeCobra CSV row JSON (nullable). Overwritten when importing from CubeCobra.
  cubeCobra    Json?

  // Relations
  poolCards    PoolCard[]
  // Back relations from Combo for each card slot
  comboCard1   Combo[]    @relation("Combo_card1")
  comboCard2   Combo[]    @relation("Combo_card2")
  comboCard3   Combo[]    @relation("Combo_card3")
  comboCard4   Combo[]    @relation("Combo_card4")
  comboCard5   Combo[]    @relation("Combo_card5")
  comboCard6   Combo[]    @relation("Combo_card6")
  comboCard7   Combo[]    @relation("Combo_card7")
  comboCard8   Combo[]    @relation("Combo_card8")
  comboCard9   Combo[]    @relation("Combo_card9")
  comboCard10  Combo[]    @relation("Combo_card10")

  @@unique([name])
  @@index([set])
}

model Pool {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // Optional title or memo
  title     String?
  // Original pasted text (optional)
  raw       String?

  // Relations
  poolCards PoolCard[]
  drafts    Draft[]
  combos    Combo[]
}

model PoolCard {
  // Composite PK to avoid duplicates of the same card in a pool
  poolId    String
  cardId    String
  count     Int       // how many copies of this card in the pool
  order     Int?
  tags      String[]  @default([])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  pool      Pool      @relation(fields: [poolId], references: [id], onDelete: Cascade)
  card      Card      @relation(fields: [cardId], references: [id])

  @@id([poolId, cardId])
  @@index([cardId])
}

model Draft {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  poolId String
  pool   Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)

  // NOTE: spec had a typo "seet"; correct field is seat
  seat  Int
  packs Json
  picks Json

  @@index([poolId])
}

model Combo {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  poolId        String
  pool          Pool     @relation(fields: [poolId], references: [id], onDelete: Cascade)

  // Commander Spellbook columns
  sourceId      String   // from CSV "ID"
  colorIdentity String?
  prerequisites String?
  steps         String?
  results       String?

  // Up to 10 cards referenced by name -> Card relations (nullable)
  card1Id  String?
  card2Id  String?
  card3Id  String?
  card4Id  String?
  card5Id  String?
  card6Id  String?
  card7Id  String?
  card8Id  String?
  card9Id  String?
  card10Id String?

  card1   Card?    @relation("Combo_card1", fields: [card1Id], references: [id])
  card2   Card?    @relation("Combo_card2", fields: [card2Id], references: [id])
  card3   Card?    @relation("Combo_card3", fields: [card3Id], references: [id])
  card4   Card?    @relation("Combo_card4", fields: [card4Id], references: [id])
  card5   Card?    @relation("Combo_card5", fields: [card5Id], references: [id])
  card6   Card?    @relation("Combo_card6", fields: [card6Id], references: [id])
  card7   Card?    @relation("Combo_card7", fields: [card7Id], references: [id])
  card8   Card?    @relation("Combo_card8", fields: [card8Id], references: [id])
  card9   Card?    @relation("Combo_card9", fields: [card9Id], references: [id])
  card10  Card?    @relation("Combo_card10", fields: [card10Id], references: [id])

  @@index([poolId])
  @@index([card1Id])
  @@index([card2Id])
  @@index([card3Id])
  @@index([card4Id])
  @@index([card5Id])
  @@index([card6Id])
  @@index([card7Id])
  @@index([card8Id])
  @@index([card9Id])
  @@index([card10Id])
}
